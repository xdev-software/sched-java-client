/*
 * Sched REST API
 * Sched REST API documentation by XDEV Software
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package software.xdev.sched.api;

import com.fasterxml.jackson.core.type.TypeReference;

import software.xdev.sched.client.ApiException;
import software.xdev.sched.client.ApiClient;
import software.xdev.sched.client.Configuration;
import software.xdev.sched.client.Pair;

import java.net.URI;
import software.xdev.sched.model.User;
import software.xdev.sched.model.UserAdded;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UserApi {


  private ApiClient apiClient;

  public UserApi() {
    this(Configuration.getDefaultApiClient());
  }

  public UserApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * 
   * 
   * @param username Required when email is not set; Allowed: alphanumerics, period, underscore (optional)
   * @param email Required when username is not set (optional)
   * @param password User&#39;s desired password. Optional. Random password will be generated if none provided. (optional)
   * @param phone  (optional)
   * @param privacy Default is 1 (on), Set to 0 (off) (optional)
   * @param role Currently one of the following: attendee, speaker, artist, sponsor, exhibitor (optional)
   * @param sessions Comma separated string of session id&#39;s which the user will be connected to (optional)
   * @param fullName  (optional)
   * @param about Short bio/description. Some HTML allowed (a,b,br,i,em,strong) (optional)
   * @param avatar Publicly accessible, not shortened URL to gif, jpg or png image. Images are copied and resized on our server (optional)
   * @param location  (optional)
   * @param company  (optional)
   * @param position  (optional)
   * @param booth Exhibitor booth (applies only to users with the role set to \&quot;exhibitor\&quot;) (optional)
   * @param sendEmail Default is 1 (on), Set to 0 (off). Whether to send e-mail with login credentials to user (optional)
   * @param tags A comma separated list of tags to add to the user (optional)
   * @param legacyApi Undocumented. Needed to link existing accounts with this email (optional)
   * @return UserAdded
   * @throws ApiException if fails to make API call
   */
  public UserAdded addUser(String username, String email, String password, String phone, String privacy, String role, String sessions, String fullName, String about, URI avatar, String location, String company, String position, String booth, String sendEmail, String tags, String legacyApi) throws ApiException {
    return this.addUser(username, email, password, phone, privacy, role, sessions, fullName, about, avatar, location, company, position, booth, sendEmail, tags, legacyApi, Collections.emptyMap());
  }


  /**
   * 
   * 
   * @param username Required when email is not set; Allowed: alphanumerics, period, underscore (optional)
   * @param email Required when username is not set (optional)
   * @param password User&#39;s desired password. Optional. Random password will be generated if none provided. (optional)
   * @param phone  (optional)
   * @param privacy Default is 1 (on), Set to 0 (off) (optional)
   * @param role Currently one of the following: attendee, speaker, artist, sponsor, exhibitor (optional)
   * @param sessions Comma separated string of session id&#39;s which the user will be connected to (optional)
   * @param fullName  (optional)
   * @param about Short bio/description. Some HTML allowed (a,b,br,i,em,strong) (optional)
   * @param avatar Publicly accessible, not shortened URL to gif, jpg or png image. Images are copied and resized on our server (optional)
   * @param location  (optional)
   * @param company  (optional)
   * @param position  (optional)
   * @param booth Exhibitor booth (applies only to users with the role set to \&quot;exhibitor\&quot;) (optional)
   * @param sendEmail Default is 1 (on), Set to 0 (off). Whether to send e-mail with login credentials to user (optional)
   * @param tags A comma separated list of tags to add to the user (optional)
   * @param legacyApi Undocumented. Needed to link existing accounts with this email (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return UserAdded
   * @throws ApiException if fails to make API call
   */
  public UserAdded addUser(String username, String email, String password, String phone, String privacy, String role, String sessions, String fullName, String about, URI avatar, String location, String company, String position, String booth, String sendEmail, String tags, String legacyApi, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/user/add";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("username", username));
    localVarQueryParams.addAll(apiClient.parameterToPair("email", email));
    localVarQueryParams.addAll(apiClient.parameterToPair("password", password));
    localVarQueryParams.addAll(apiClient.parameterToPair("phone", phone));
    localVarQueryParams.addAll(apiClient.parameterToPair("privacy", privacy));
    localVarQueryParams.addAll(apiClient.parameterToPair("role", role));
    localVarQueryParams.addAll(apiClient.parameterToPair("sessions", sessions));
    localVarQueryParams.addAll(apiClient.parameterToPair("full_name", fullName));
    localVarQueryParams.addAll(apiClient.parameterToPair("about", about));
    localVarQueryParams.addAll(apiClient.parameterToPair("avatar", avatar));
    localVarQueryParams.addAll(apiClient.parameterToPair("location", location));
    localVarQueryParams.addAll(apiClient.parameterToPair("company", company));
    localVarQueryParams.addAll(apiClient.parameterToPair("position", position));
    localVarQueryParams.addAll(apiClient.parameterToPair("booth", booth));
    localVarQueryParams.addAll(apiClient.parameterToPair("send_email", sendEmail));
    localVarQueryParams.addAll(apiClient.parameterToPair("tags", tags));
    localVarQueryParams.addAll(apiClient.parameterToPair("legacy_api", legacyApi));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json", "text/html"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<UserAdded> localVarReturnType = new TypeReference<UserAdded>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * 
   * 
   * @param format  (optional, default to json)
   * @param fields Comma separated list of fields. Default: \&quot;username\&quot;, \&quot;name\&quot;, \&quot;phone\&quot;, \&quot;email\&quot;, \&quot;joined\&quot;, \&quot;lastactive\&quot;, \&quot;avatar\&quot;, \&quot;company\&quot;, \&quot;position\&quot;, \&quot;location\&quot;. Available fields: \&quot;id\&quot;, \&quot;username\&quot;, \&quot;name\&quot;, \&quot;phone\&quot;, \&quot;email\&quot;, \&quot;url\&quot;, \&quot;about\&quot;, \&quot;role\&quot;, \&quot;joined\&quot;, \&quot;lastactive\&quot;, \&quot;avatar\&quot;, \&quot;company\&quot;, \&quot;position\&quot;, \&quot;location\&quot;; (optional)
   * @return List&lt;User&gt;
   * @throws ApiException if fails to make API call
   */
  public List<User> listUsers(String format, String fields) throws ApiException {
    return this.listUsers(format, fields, Collections.emptyMap());
  }


  /**
   * 
   * 
   * @param format  (optional, default to json)
   * @param fields Comma separated list of fields. Default: \&quot;username\&quot;, \&quot;name\&quot;, \&quot;phone\&quot;, \&quot;email\&quot;, \&quot;joined\&quot;, \&quot;lastactive\&quot;, \&quot;avatar\&quot;, \&quot;company\&quot;, \&quot;position\&quot;, \&quot;location\&quot;. Available fields: \&quot;id\&quot;, \&quot;username\&quot;, \&quot;name\&quot;, \&quot;phone\&quot;, \&quot;email\&quot;, \&quot;url\&quot;, \&quot;about\&quot;, \&quot;role\&quot;, \&quot;joined\&quot;, \&quot;lastactive\&quot;, \&quot;avatar\&quot;, \&quot;company\&quot;, \&quot;position\&quot;, \&quot;location\&quot;; (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;User&gt;
   * @throws ApiException if fails to make API call
   */
  public List<User> listUsers(String format, String fields, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/user/list";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("format", format));
    localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json", "text/html"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<List<User>> localVarReturnType = new TypeReference<List<User>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

}
